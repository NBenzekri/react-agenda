{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInputChange","inputName","value","nextValue","setState","defineProperty","addEvent","newArray","toConsumableArray","state","events","push","id","length","time","title","location","description","toggleModal","modal","handleDelete","eventId","filter","e","_this2","react_default","a","createElement","Fragment","mdbreact","md","className","map","event","App_Event","key","onDelete","xl","color","rounded","onClick","xs","icon","fixed","fluid","Date","getFullYear","isOpen","toggle","titleClass","name","label","hint","group","type","getValue","Component","Event","_this3","_this4","tag","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.6bf77285.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { MDBBtn, MDBInput, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter, MDBIcon, MDBBadge, MDBContainer, MDBRow, MDBCol } from \"mdbreact\";\r\nimport { MDBFooter } from \"mdbreact\";\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      modal: false,\r\n      events: [\r\n        {\r\n          id: 1,\r\n          time: \"10:00\",\r\n          title: \"Breakfast with Simon\",\r\n          location: \"Lounge Caffe\",\r\n          description: \"Discuss Q3 targets\"\r\n        },\r\n        {\r\n          id: 2,\r\n          time: \"10:30\",\r\n          title: \"Daily Standup Meeting (recurring)\",\r\n          location: \"Warsaw Spire Office\"\r\n        },\r\n        { id: 3, time: \"11:00\", title: \"Call with HRs\" },\r\n        {\r\n          id: 4,\r\n          time: \"11:00\",\r\n          title: \"Lunch with Timothy\",\r\n          location: \"Canteen\",\r\n          description:\r\n            \"Project evaluation ile declaring a variable and using an if statement is a fine way to conditionally render a component, sometimes you might want to use a\"\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <MDBContainer>\r\n          <MDBRow>\r\n            <MDBCol md=\"9\" className=\"mb-r\">\r\n              <h2 className=\"text-uppercase my-3\">Today:</h2>\r\n              <div id=\"schedule-items\">\r\n                {this.state.events.map(event => (\r\n                  <Event\r\n                    key={event.id}\r\n                    id={event.id}\r\n                    time={event.time}\r\n                    title={event.title}\r\n                    location={event.location}\r\n                    description={event.description}\r\n                    onDelete={this.handleDelete}\r\n                  />\r\n                ))}\r\n              </div>\r\n              <MDBRow className=\"mb-4\">\r\n                <MDBCol xl=\"3\" md=\"6\" className=\"mx-auto text-center\">\r\n                  <MDBBtn\r\n                    color=\"info\"\r\n                    rounded\r\n                    onClick={this.toggleModal}\r\n                  >\r\n                    Add Event\r\n                  </MDBBtn>\r\n                </MDBCol>\r\n              </MDBRow>\r\n            </MDBCol>\r\n            <MDBCol md=\"3\">\r\n              <h3 className=\"text-uppercase my-3\">Schedule</h3>\r\n              <h6 className=\"my-3\">\r\n                It's going to be busy that today. You have{\" \"}\r\n                <b>{this.state.events.length} events </b> today.\r\n              </h6>\r\n              <h1 className=\"my-3\">\r\n                <MDBRow>\r\n                  <MDBCol xs=\"3\" className=\"text-center\">\r\n                    <MDBIcon icon=\"sun\" fixed />\r\n                  </MDBCol>\r\n                  <MDBCol xs=\"9\">Sunny</MDBCol>\r\n                </MDBRow>\r\n                <MDBRow>\r\n                  <MDBCol xs=\"3\" className=\"text-center\">\r\n                    <MDBIcon icon=\"thermometer-three-quarters\" fixed />\r\n                  </MDBCol>\r\n                  <MDBCol xs=\"9\">23Â°C</MDBCol>\r\n                </MDBRow>\r\n              </h1>\r\n              <p>\r\n                Don't forget your sunglasses. Today will dry and sunny, becoming\r\n                warm in the afternoon with temperatures of between 20 and 25\r\n                degrees.\r\n              </p>\r\n            </MDBCol>\r\n          </MDBRow>\r\n          <MDBFooter color=\"primary-color\">\r\n            <div className=\"footer-copyright text-center py-3\">\r\n              <MDBContainer fluid>\r\n                &copy; {new Date().getFullYear()} Copyrights\r\n            </MDBContainer>\r\n            </div>\r\n          </MDBFooter>\r\n        </MDBContainer>\r\n        {/* Modal code below: */}\r\n        <MDBModal isOpen={this.state.modal} toggle={this.toggleModal}>\r\n          <MDBModalHeader\r\n            className=\"text-center\"\r\n            titleClass=\"w-100 font-weight-bold\"\r\n            toggle={this.toggleModal}\r\n          >\r\n            Add new event\r\n          </MDBModalHeader>\r\n          <MDBModalBody>\r\n            <form className=\"mx-3 grey-text\">\r\n              <MDBInput\r\n                name=\"time\"\r\n                label=\"Time\"\r\n                icon=\"clock\"\r\n                hint=\"12:30\"\r\n                group\r\n                type=\"text\"\r\n                getValue={this.handleInputChange(\"time\")}\r\n              />\r\n              <MDBInput\r\n                name=\"title\"\r\n                label=\"Title\"\r\n                icon=\"edit\"\r\n                hint=\"Briefing\"\r\n                group\r\n                type=\"text\"\r\n                getValue={this.handleInputChange(\"title\")}\r\n              />\r\n              <MDBInput\r\n                name=\"location\"\r\n                label=\"Location (optional)\"\r\n                icon=\"map\"\r\n                group\r\n                type=\"text\"\r\n                getValue={this.handleInputChange(\"location\")}\r\n              />\r\n              <MDBInput\r\n                name=\"description\"\r\n                label=\"Description (optional)\"\r\n                icon=\"sticky-note\"\r\n                group\r\n                type=\"textarea\"\r\n                getValue={this.handleInputChange(\"description\")}\r\n              />\r\n\r\n            </form>\r\n          </MDBModalBody>\r\n\r\n          <MDBModalFooter className=\"justify-content-center\">\r\n            <MDBBtn\r\n              color=\"info\"\r\n              onClick={() => {\r\n                this.toggleModal();\r\n                (\r\n                  // Prevent creating an empty event\r\n                  (this.state.time &&\r\n                    this.state.title &&\r\n                    this.state.location\r\n                  ) ||\r\n                  this.state.description\r\n                ) &&\r\n                  this.addEvent();\r\n              }}\r\n            >\r\n              Add\r\n            </MDBBtn>\r\n          </MDBModalFooter>\r\n        </MDBModal>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n  //store input values from add modal within a state\r\n  handleInputChange = inputName => value => {\r\n    const nextValue = value;\r\n    this.setState({\r\n      [inputName]: nextValue\r\n    });\r\n  };\r\n  //add the new event to events state\r\n  addEvent = () => {\r\n    var newArray = [...this.state.events];\r\n\r\n    newArray.push({\r\n      id: newArray.length ? newArray[newArray.length - 1].id + 1 : 1,\r\n      time: this.state.time,\r\n      title: this.state.title,\r\n      location: this.state.location,\r\n      description: this.state.description\r\n    });\r\n    this.setState({ events: newArray });\r\n    this.setState({\r\n      time: \"\",\r\n      title: \"\",\r\n      location: \"\",\r\n      description: \"\"\r\n    });\r\n  };\r\n\r\n  //toggle (show/hide) the modal\r\n  toggleModal = () => {\r\n    this.setState({\r\n      modal: !this.state.modal\r\n    });\r\n  };\r\n\r\n  // delete event\r\n  handleDelete = eventId => {\r\n    const events = this.state.events.filter(e => e.id !== eventId);\r\n    this.setState({ events });\r\n  };\r\n\r\n}\r\n\r\nclass Event extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      time: this.props.time,\r\n      title: this.props.title\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"media mt-1\">\r\n          <h3 className=\"h3-responsive font-weight-bold mr-3\">\r\n            {this.props.time}\r\n          </h3>\r\n          <div className=\"media-body mb-3 mb-lg-3\">\r\n            <MDBBadge\r\n              tag=\"a\"\r\n              onClick={() => this.props.onDelete(this.props.id)}\r\n              color=\"danger\"\r\n              className=\"ml-2 float-right\" >\r\n              <MDBIcon icon=\"times\"></MDBIcon>\r\n            </MDBBadge>\r\n            <h6 className=\"mt-0 font-weight-bold\">{this.props.title} </h6>{\" \"}\r\n            <hr className=\"hr-bold my-2\" />\r\n            {this.props.location && (\r\n              <React.Fragment>\r\n                <p className=\"font-smaller mb-0\">\r\n                  <MDBIcon icon=\"location-arrow\" /> {this.props.location}\r\n                </p>\r\n              </React.Fragment>\r\n            )}\r\n          </div>\r\n        </div>\r\n        {this.props.description && (\r\n          <p className=\"p-2 mb-4  blue-grey lighten-5 blue-grey lighten-5\">\r\n            {this.props.description}\r\n          </p>\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log(\"New content is available; please refresh.\");\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport '@fortawesome/fontawesome-free/css/all.min.css';\r\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\r\nimport \"mdbreact/dist/css/mdb.css\";\r\nimport \"./index.css\";\r\nimport App from './App';\r\n\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render( < App / > , document.getElementById('root'));\r\n\r\nregisterServiceWorker();"],"sourceRoot":""}